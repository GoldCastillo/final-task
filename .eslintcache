[{"C:\\Users\\mikko\\git\\final-task\\src\\Components\\Customers.js":"1","C:\\Users\\mikko\\git\\final-task\\src\\Components\\EditCustomer.js":"2","C:\\Users\\mikko\\git\\final-task\\src\\index.js":"3","C:\\Users\\mikko\\git\\final-task\\src\\Components\\AddCustomer.js":"4","C:\\Users\\mikko\\git\\final-task\\src\\Components\\Trainings.js":"5","C:\\Users\\mikko\\git\\final-task\\src\\Components\\AddTraining.js":"6"},{"size":4988,"mtime":1607942758043,"results":"7","hashOfConfig":"8"},{"size":3628,"mtime":1607884355031,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1606134129245,"results":"10","hashOfConfig":"8"},{"size":3207,"mtime":1607342680076,"results":"11","hashOfConfig":"8"},{"size":2728,"mtime":1607945047692,"results":"12","hashOfConfig":"8"},{"size":2428,"mtime":1607945179717,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1gar8e9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mikko\\git\\final-task\\src\\Components\\Customers.js",["29","30","31","32","33","34","35"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\r\nimport AddCustomer from \"./AddCustomer\";\r\nimport EditCustomer from \"./EditCustomer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { PropertyKeys } from \"ag-grid-community\";\r\nimport AddTraining from \"./AddTraining\"\r\nimport Trainings from \"./Trainings\"\r\n\r\nfunction Customers() {\r\n  const [customers, setCustomers] = useState([]);\r\n  const [addOpen, setAddOpen] = useState(false);\r\n  const [updateOpen, setUpdateOpen] = useState(false);\r\n  const [deleteOpen, setDeleteOpen] = useState(false);\r\n  const [trainings, setTrainings] = useState([]);\r\n  const gridRef = useRef();\r\n  useEffect(() => {\r\n    getCustomers();\r\n  }, []);\r\n\r\n\r\n  const getCustomers = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/customers\")\r\n      .then((response) => response.json())\r\n      .then((data) => setCustomers(data.content))\r\n      .catch((err) => console.error(err));\r\n  };\r\n  const getTrainings = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/trainings\")\r\n      .then((response) => response.json())\r\n      .then((data) => setTrainings(data))\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const addCustomer = (newCustomer) => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/customers\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(newCustomer),\r\n    })\r\n      .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers() }))\r\n      .then((_) => setAddOpen(true))\r\n      .catch((err) => console.error(err));\r\n  };\r\n  const updateCustomer = (customer, link) => {\r\n    fetch(link, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(customer),\r\n      \r\n    })\r\n      .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers() }))\r\n      .then((_) => setUpdateOpen(true))\r\n      .catch((err) => console.error(err));\r\n     \r\n  };\r\n\r\n  const deleteCustomer = (link) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      fetch(link[0].href, { method: \"DELETE\" })\r\n        .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers() }))\r\n        .then((_) => setDeleteOpen(true))\r\n        .catch((err) => console.error(err));\r\n    } };\r\n    const addTraining = (newTraining) => {\r\n      fetch(\"https://customerrest.herokuapp.com/api/trainings\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(newTraining),\r\n      })\r\n        .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers()}))\r\n        .then((_) => setAddOpen(true))\r\n        .catch((err) => console.error(err));\r\n    };\r\n \r\n  const columns = [\r\n    {\r\n      headerName: \"First name\",\r\n      field: \"firstname\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Last name\",\r\n      field: \"lastname\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Street address\",\r\n      field: \"streetaddress\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Postcode\",\r\n      field: \"postcode\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"City\",\r\n      field: \"city\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Email\",\r\n      field: \"email\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Phone\",\r\n      field: \"phone\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      width: \"auto\",\r\n      cellRendererFramework: (row) => (\r\n        <EditCustomer updateCustomer={updateCustomer} customer={row.data} />\r\n      ),\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      field: \"links\",\r\n      width: \"auto\",\r\n\r\n      cellRendererFramework: (params) => (\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={() => deleteCustomer(params.value)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      width: \"auto\",\r\n      cellRendererFramework: (params) => <AddTraining addTraining={addTraining} params={params}/>,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div\r\n      className=\"ag-theme-material\"\r\n      style={{ height: \"700px\", width: \"70%\", margin: \"auto\" }}\r\n    >\r\n      <h2>Customers</h2>\r\n      <div>\r\n        <AddCustomer addCustomer={addCustomer} />\r\n      </div>\r\n      <AgGridReact\r\n        ref={gridRef}\r\n        suppressCellSelection={true}\r\n        onGridReady={(params) => {\r\n          gridRef.current = params.api;\r\n        }}\r\n        columnDefs={columns}\r\n        rowData={customers}\r\n        pagination=\"true\"\r\n        paginationPageSize=\"10\"\r\n      ></AgGridReact>\r\n         </div>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\mikko\\git\\final-task\\src\\Components\\EditCustomer.js",["36"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { PropertyKeys } from \"ag-grid-community\";\r\n\r\nfunction EditCustomer(props) {\r\n  const [customer, setCustomer] = useState({\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    streetaddress: \"\",\r\n    postcode: \"\",\r\n    city: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n  });\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setCustomer({\r\n        firstname: props.customer.firstname,\r\n        lastname: props.customer.lastname,\r\n        streetaddress: props.customer.streetaddress,\r\n        postcode: props.customer.postcode,\r\n        city: props.customer.city,\r\n        email: props.customer.email,\r\n        phone: props.customer.phone\r\n    });\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    props.updateCustomer(customer, props.customer.links[1].href);\r\n    handleClose();\r\n  };\r\n  const inputChanged = (event) => {\r\n    setCustomer({ ...customer, [event.target.name]: event.target.value });\r\n  };\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Edit customer\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Update customer</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"firstname\"\r\n            value={customer.firstname}\r\n            onChange={inputChanged}\r\n            label=\"First name\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"lastname\"\r\n            value={customer.lastname}\r\n            onChange={inputChanged}\r\n            label=\"Lastname\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"streetaddress\"\r\n            value={customer.streetaddress}\r\n            onChange={inputChanged}\r\n            label=\"Street address\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"postcode\"\r\n            value={customer.postcode}\r\n            onChange={inputChanged}\r\n            label=\"Postcode\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"city\"\r\n            value={customer.city}\r\n            onChange={inputChanged}\r\n            label=\"city\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"email\"\r\n            value={customer.email}\r\n            onChange={inputChanged}\r\n            label=\"Email\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            name=\"phone\"\r\n            value={customer.phone}\r\n            onChange={inputChanged}\r\n            label=\"Phone\"\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleUpdate} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditCustomer;\r\n","C:\\Users\\mikko\\git\\final-task\\src\\index.js",[],"C:\\Users\\mikko\\git\\final-task\\src\\Components\\AddCustomer.js",[],"C:\\Users\\mikko\\git\\final-task\\src\\Components\\Trainings.js",["37"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\r\nimport Moment from \"moment\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nfunction Trainings() {\r\n  const [trainings, setTrainings] = useState([]);\r\n  const gridRef = useRef();\r\n  const [deleteOpen, setDeleteOpen] = useState(false);\r\n  useEffect(() => {\r\n    getTrainings();\r\n  }, []);\r\n\r\n  const getTrainings = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/gettrainings\")\r\n      .then((response) => response.json())\r\n      .then((data) => setTrainings(data))\r\n      .catch((err) => console.error(err));\r\n  };\r\n  \r\n\r\n  const deleteTraining = (id) => {\r\n    if (window.confirm(\"Are you sure\")) {\r\n      fetch(\"https://customerrest.herokuapp.com/api/trainings/\" + id, {\r\n        method: \"DELETE\",\r\n      })\r\n        .then((_) => gridRef.current.refreshCells({ rowNodes: getTrainings() }))\r\n        .then((_) => setDeleteOpen(true))\r\n        .catch((err) => console.error(err));\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      headerName: \"Date\",\r\n      field: \"date\",\r\n      cellRenderer: (data) => {\r\n        return Moment(data.value).format(\"MM/DD/YYYY/HH:mm\");\r\n      },\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    \r\n    {\r\n      headerName: \"Duration\",\r\n      field: \"duration\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Activity\",\r\n      field: \"activity\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"First name\",\r\n      field: \"customer.firstname\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Last name\",\r\n      field: \"customer.lastname\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      field: \"data\",\r\n      width: \"auto\",\r\n      cellRendererFramework: (params) => (\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={() => deleteTraining(params.data.id)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div\r\n      className=\"ag-theme-material\"\r\n      style={{ height: \"700px\", width: \"70%\", margin: \"auto\" }}\r\n    >\r\n      <h2>Trainings</h2>\r\n\r\n      <AgGridReact\r\n        ref={gridRef}\r\n        suppressCellSelection={true}\r\n        onGridReady={(params) => {\r\n          gridRef.current = params.api;\r\n        }}\r\n        columnDefs={columns}\r\n        rowData={trainings}\r\n        pagination=\"true\"\r\n        paginationPageSize=\"10\"\r\n      ></AgGridReact>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Trainings;\r\n","C:\\Users\\mikko\\git\\final-task\\src\\Components\\AddTraining.js",[],{"ruleId":"38","severity":1,"message":"39","line":8,"column":10,"nodeType":"40","messageId":"41","endLine":8,"endColumn":22},{"ruleId":"38","severity":1,"message":"42","line":10,"column":8,"nodeType":"40","messageId":"41","endLine":10,"endColumn":17},{"ruleId":"38","severity":1,"message":"43","line":14,"column":10,"nodeType":"40","messageId":"41","endLine":14,"endColumn":17},{"ruleId":"38","severity":1,"message":"44","line":15,"column":10,"nodeType":"40","messageId":"41","endLine":15,"endColumn":20},{"ruleId":"38","severity":1,"message":"45","line":16,"column":10,"nodeType":"40","messageId":"41","endLine":16,"endColumn":20},{"ruleId":"38","severity":1,"message":"46","line":17,"column":10,"nodeType":"40","messageId":"41","endLine":17,"endColumn":19},{"ruleId":"38","severity":1,"message":"47","line":30,"column":9,"nodeType":"40","messageId":"41","endLine":30,"endColumn":21},{"ruleId":"38","severity":1,"message":"39","line":8,"column":10,"nodeType":"40","messageId":"41","endLine":8,"endColumn":22},{"ruleId":"38","severity":1,"message":"45","line":11,"column":10,"nodeType":"40","messageId":"41","endLine":11,"endColumn":20},"no-unused-vars","'PropertyKeys' is defined but never used.","Identifier","unusedVar","'Trainings' is defined but never used.","'addOpen' is assigned a value but never used.","'updateOpen' is assigned a value but never used.","'deleteOpen' is assigned a value but never used.","'trainings' is assigned a value but never used.","'getTrainings' is assigned a value but never used."]